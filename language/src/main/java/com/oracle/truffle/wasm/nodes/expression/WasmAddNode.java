/*
 * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.truffle.wasm.nodes.expression;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.Fallback;
import com.oracle.truffle.api.dsl.ImplicitCast;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;
import com.oracle.truffle.wasm.WasmException;
import com.oracle.truffle.wasm.nodes.WasmBinaryNode;
import com.oracle.truffle.wasm.nodes.WasmTypes;
import com.oracle.truffle.wasm.runtime.WasmBigNumber;

import java.lang.Float;

/**
 * Wasm node that performs the "+" operation, which performs addition on arbitrary precision numbers,
 * as well as String concatenation if one of the operands is a String.
 * <p>
 * Type specialization on the input values is essential for the performance. This is achieved via
 * node rewriting: specialized subclasses handle just a single type, so that the generic node that
 * can handle all types is used only in cases where different types were encountered. The subclasses
 * are automatically generated by the Truffle DSL. In addition, a {@link WasmAddNodeGen factory class}
 * is generated that provides, e.g., {@link WasmAddNodeGen#create node creation}.
 */
@NodeInfo(shortName = "add")
public abstract class WasmAddNode extends WasmBinaryNode {

    @Specialization
    protected int add(int left, int right) { return (left + right) % (2 ^ 32); }
    /**
     * Specialization for primitive {@code long} values. This is the fast path of the
     * arbitrary-precision arithmetic. We need to check for overflows of the addition, and switch to
     * the {@link #add(WasmBigNumber, WasmBigNumber) slow path}. Therefore, we use an
     * {@link Math#addExact(long, long) addition method that throws an exception on overflow}. The
     * {@code rewriteOn} attribute on the {@link Specialization} annotation automatically triggers
     * the node rewriting on the exception.
     * <p>
     * In compiled code, {@link Math#addExact(long, long) addExact} is compiled to efficient machine
     * code that uses the processor's overflow flag. Therefore, this method is compiled to only two
     * machine code instructions on the fast path.
     * <p>
     * This specialization is automatically selected by the Truffle DSL if both the left and right
     * operand are {@code long} values.
     */
    @Specialization
    protected long add(long left, long right) {
        return (left + right) % (2 ^ 64);
    }

    @Specialization
    protected float add(float left, float right) {
        if (Float.isNaN(left) && Float.isNaN(right)) {
            return left;
        } else if (Float.isNaN(left)) {
            return left;
        } else if (Float.isNaN(right)) {
            return right;
        } else if (left == Float.POSITIVE_INFINITY && right == Float.POSITIVE_INFINITY) {
            return left;
        } else if (left == Float.NEGATIVE_INFINITY && right == Float.NEGATIVE_INFINITY) {
            return left;
        } else if ((left == Float.POSITIVE_INFINITY && right == Float.NEGATIVE_INFINITY) || (left == Float.NEGATIVE_INFINITY && right == Float.POSITIVE_INFINITY)) {
            return 0; // TODO nan{}; ?
        } else if (Float.isInfinite(left)) {
            return left;
        } else if (Float.isInfinite(right)) {
            return right;
        } else if ((left == -0 && right == +0) || (left == +0 && right == -0)) {
            return +0;
        } else if ((left == +0 && right == +0) || (left == -0 && right == -0)) {
            return left;
        } else if (left == +0 || left == -0) {
            return right;
        } else if (right == +0 || right == -0) {
            return left;
        } else if (Math.abs(left) == Math.abs(right)) {
            return +0;
        } else {
            return left + right;
        }
    }

    @Specialization
    protected double add(double left, double right) {
        return left + right; // TODO once Float version is tested, copy here
    }

    @Fallback
    protected Object typeError(Object left, Object right) {
        throw WasmException.typeError(this, left, right);
    }
}
